<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="ModuleScript" referent="RBXA2335CCA1F914A30B2BE7BB0D02AEC79">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">RoactAnimate</string>
			<string name="ScriptGuid">{D215CC60-24FF-4981-84B4-37B7321BF087}</string>
			<ProtectedString name="Source"><![CDATA[local makeAnimatedComponent = require(script.makeAnimatedComponent)

local RoactAnimate = {}

for _, class in ipairs({ "Frame", "ImageLabel", "ImageButton", "TextButton", "TextBox", "TextLabel", "ScrollingFrame" }) do
	RoactAnimate[class] = makeAnimatedComponent(class)
end

RoactAnimate.Value = require(script.AnimatedValue)
RoactAnimate.makeAnimatedComponent = makeAnimatedComponent
RoactAnimate.Animation = require(script.Animation)
RoactAnimate.AnimationSequence = require(script.AnimationSequence)

function RoactAnimate.Animate(value, tweenInfo, to)
	return RoactAnimate.Animation.new(value, tweenInfo, to)
end

function RoactAnimate.Sequence(animations)
	return RoactAnimate.AnimationSequence.new(animations, false)
end

function RoactAnimate.Parallel(animations)
	return RoactAnimate.AnimationSequence.new(animations, true)
end

setmetatable(RoactAnimate, { __call = function(_, ...) return RoactAnimate.Animate(...) end; })

return RoactAnimate
]]></ProtectedString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBXE5368B95C47D4D31B74920E16CB3497B">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">AnimatedValue</string>
				<string name="ScriptGuid">{959573A8-F400-47BF-A00C-BEEEF2DDB275}</string>
				<ProtectedString name="Source"><![CDATA[-- Represents an animated value.
-- This is literally a Lua implementation of a generic *Value.

local Value = {}
Value.__index = Value

function Value.new(initial)
	local self = setmetatable({
		Value = initial;
		_valueType = typeof(initial);
		_startAnimation = Instance.new("BindableEvent");
		_finishAnimation = Instance.new("BindableEvent");
		_class = Value;
	}, Value)

	self.AnimationStarted = self._startAnimation.Event
	self.AnimationFinished = self._finishAnimation.Event

	return self
end

function Value:StartAnimation(toValue, tweenInfo)
	self._startAnimation:Fire(toValue, tweenInfo)
end

function Value:FinishAnimation()
	self._finishAnimation:Fire()
end

return Value
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX8785553295FB4D679CE012A5BEB7AF72">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Animation</string>
				<string name="ScriptGuid">{D851B148-D05F-4F97-A277-83266B726B4F}</string>
				<ProtectedString name="Source"><![CDATA[local Animation = {}
Animation.__index = Animation

function Animation.new(value, tweenInfo, to)
	local self = setmetatable({
		_value = value;
		_tween = tweenInfo;
		_to = to;
		_finished = Instance.new("BindableEvent");
	}, Animation)

	self.AnimationFinished = self._finished.Event

	value.AnimationFinished:Connect(function(...)
		self._finished:Fire(...)
	end)

	return self
end

function Animation:Start()
	self._value:StartAnimation(self._to, self._tween)
end

return Animation
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX0B13D85F52B74F899BF50371AD12E22B">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">AnimationSequence</string>
				<string name="ScriptGuid">{70CE39BF-8B7E-4E33-B8A6-615747E46323}</string>
				<ProtectedString name="Source"><![CDATA[local AnimationSequence = {}
AnimationSequence.__index = AnimationSequence

function AnimationSequence.new(animations, parallel)
	local self = setmetatable({
		_animations = animations;
		_parallel = parallel;
		_finished = Instance.new("BindableEvent");
	}, AnimationSequence)

	self.AnimationFinished = self._finished.Event

	return self
end

function AnimationSequence:Start()
	spawn(function()
		for _, animation in ipairs(self._animations) do
			animation:Start()

			if not self._parallel then
				animation.AnimationFinished:Wait()
			end
		end

		self._finished:Fire()
	end)
end

return AnimationSequence
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXBCB224A3600846BA8D7F529BAD5AB736">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">makeAnimatedComponent</string>
				<string name="ScriptGuid">{E7CECEA6-9A34-462F-882E-D274C2F9EB70}</string>
				<ProtectedString name="Source"><![CDATA[-- Wraps a component to produce a new component that responds to animated values.

local TweenService = game:GetService("TweenService")

local Roact = require(game:GetService("ReplicatedStorage").Roact)
local AnimatedValue = require(script.Parent.AnimatedValue)

local function makeAnimatedComponent(toWrap)
	local wrappedComponent = Roact.Component:extend("_animatedComponent:"..tostring(toWrap))

	function wrappedComponent:didMount()
		-- Disconnect any currently registered listeners, just in case.
		self:_disconnectListeners()

		self._listeners = {}

		for key, value in pairs(self.props) do
			if typeof(value) == "table" and value._class == AnimatedValue then
				local _currentTween = nil

				table.insert(self._listeners, value.AnimationStarted:Connect(function(to, tweenInfo)
					if self._rbx then
						if _currentTween then
							_currentTween:Cancel()
						end

						local tween = TweenService:Create(self._rbx, tweenInfo, { [key] = to; })
						tween:Play()
						_currentTween = tween

						_currentTween.Completed:Connect(function(status)
							if status == Enum.PlaybackState.Completed then
								value:FinishAnimation()
							end
						end)
					end
				end))
			end
		end
	end

	function wrappedComponent:willUnmount()
		self:_disconnectListeners()
	end

	function wrappedComponent:render()
		-- Intercept Roact.Ref; we need access to the reference as well
		local ref = self.props[Roact.Ref]

		-- Create the properties table from scratch
		local props = {}

		for key, value in pairs(self.props) do
			-- If it's an AnimatedValue, use its current value.
			if typeof(value) == "table" and value._class == AnimatedValue then
				props[key] = value.Value
			-- Otherwise, just forward it on.
			else
				props[key] = value
			end
		end

		props[Roact.Ref] = function(rbx)
			self._rbx = rbx

			if ref then
				ref(rbx)
			end
		end

		return Roact.createElement(toWrap, props, self.props[Roact.Children])
	end

	function wrappedComponent:_disconnectListeners()
		if not self._listeners then return end

		for _, listener in ipairs(self._listeners) do
			listener:Disconnect()
		end
	end

	return wrappedComponent
end

return makeAnimatedComponent]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
</roblox>